{"version":3,"sources":["components/Snake.jsx","components/Fruit.jsx","components/Results.jsx","components/SaveResultsForm.jsx","components/PlayData.jsx","constants.js","SnakeApp.js","components/getResultsList.js","serviceWorker.js","index.js"],"names":["Snake","snakeBody","defaultProps","map","item","i","style","left","top","className","key","Fruit","fruitBody","Results","results","player","score","SaveResultsForm","onChange","onClick","value","points","htmlFor","id","type","document","location","reload","PlayData","DEFAULT_PLAYERS","initialState","fruit","direction","isGameOn","showForm","inputTextValue","resultsList","localStorage","getItem","JSON","parse","getResultsList","SnakeApp","onKeyDown","e","state","window","event","keyCode","setState","moveSnake","snakeCopy","head","length","push","shift","isCrushToBorder","gameOver","isCrushToSnake","sign","snake","fruitOnSnake","forEach","pop","isAteFruit","getNewFruitPosition","increaseSnakeSize","increaseSpeed","unshift","speed","clearInterval","intervalID","setInterval","Math","floor","random","handleInputOnChange","target","isSaveResultsOpen","saveResults","setItem","stringify","startNewGame","onkeydown","this","sortedResults","sort","a","b","splice","canShowResults","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2fc8eea9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Snake = ({ snakeBody }) => {\n  Snake.propTypes = {\n    snakeBody: PropTypes.array.isRequired,\n  }\n  Snake.defaultProps = {\n    snakeBody: [],\n  }\n\n  return (\n    <div>\n      {snakeBody.map((item, i) => {\n        const style = {\n          left: `${item[0]}%`,\n          top: `${item[1]}%`\n        }\n        return (\n          <div className=\"snakeBody\" key={i} style={style}></div>\n        )\n      })}\n    </div>\n  )\n}\nexport default Snake;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Fruit = ({ fruitBody }) => {\n  Fruit.propTypes = {\n    fruitBody: PropTypes.array.isRequired,\n  }\n  Fruit.defaultProps = {\n    fruitBody: [],\n  }\n\n  const style = {\n    left: `${fruitBody[0]}%`,\n    top: `${fruitBody[1]}%`\n  }\n\n  return (\n    <div className=\"fruit\" style={style}></div>\n  )\n}\n\nexport default Fruit;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Results = ({ results }) => {\n   Results.propTypes = {\n       results: PropTypes.array.isRequired,\n   }\n   Results.defaultProps = {\n       results: [],\n   }\n   return (\n        <div className=\"results\">\n            <div className=\"resultsWrapTitle\"><h2>Лучшие игроки:</h2></div>\n            <ul>\n                {results.map((item, i)=>(\n                    <li key={i}>{`${item.player} - ${item.score}`}</li>\n                ))}\n            </ul>\n        </div>\n   );\n}\n\nexport default  Results;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst SaveResultsForm = ({ onChange, onClick, value, points }) => {\n\n    SaveResultsForm.propTypes = {\n        onChange: PropTypes.func,\n        onClick: PropTypes.func,\n        value: PropTypes.string.isRequired,\n        points: PropTypes.number,\n    }\n      \n    SaveResultsForm.defaultProps = {\n        onChange: () => {},\n        onClick: () => {},\n        value: '',\n        points: 0,\n    }\n\n    return(\n        <div className=\"saveResult\">  \n            <div className=\"saveResult_congrats\">Поздравляем, ваш результат - {points} </div>\n            <form className=\"saveResult_form\">\n                <div>\n                    <label htmlFor=\"playerName\">\n                        Введите ваше имя:    \n                    </label>\n                    <input id=\"playerName\" type=\"text\" onChange={onChange} value={value}/>\n                </div>\n                <button onClick={onClick}>Сохранить резьтат</button>\n                <button onClick={document.location.reload}>Отмена</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SaveResultsForm;","//Show speed and points during game\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlayData = ({ points }) => {\n    PlayData.propTypes = {\n        points: PropTypes.number.isRequired,\n    }\n    PlayData.defaultProps = {\n        points: 0,\n    }\n\n    return (\n       <div className=\"playData\">\n            <div className=\"playData_text\">Вы набрали:  <span className=\"playData_small\">{points}</span></div>\n            <div className=\"playData_text\">Ваша скорость:  <span className=\"playData_small\">{10 + (points * 7)}</span> Км/ч</div>\n       </div>\n    );\n}\n\nexport default  PlayData;","const UP = 'UP',\n      DOWN = 'DOWN',\n      LEFT = 'LEFT',\n      RIGHT = 'RIGHT',\n      SNAKE_START = [[30,30]],\n      FRUIT_START = [50,50],\n      SPEED_START = 300,\n      POINTS_START = 0,\n      DEFAULT_PLAYERS = [\n        {\n            player: 'Вин Дизель',\n            score: 20,\n        },\n        {\n            player: 'Робин Гуд',\n            score: 15,\n        },\n        {\n            player: 'Чебурашка',\n            score: 10,\n        },\n        {\n            player: 'Мишка Гамми',\n            score: 5,\n        },\n      ];\n      \nexport {\n    UP,\n    DOWN ,\n    LEFT,\n    RIGHT,\n    SNAKE_START,\n    FRUIT_START,\n    SPEED_START,\n    POINTS_START,\n    DEFAULT_PLAYERS,\n}","import React, { Component } from 'react';\nimport Snake from './components/Snake';\nimport Fruit from './components/Fruit';\nimport Results from './components/Results';\nimport SaveResultsForm from './components/SaveResultsForm';\nimport PlayData from './components/PlayData';\nimport getResultsList from './components/getResultsList';\n\nimport {\n    UP,\n    DOWN ,\n    LEFT,\n    RIGHT,\n    SNAKE_START,\n    FRUIT_START,\n    SPEED_START,\n    POINTS_START,\n} from './constants.js';\n\nconst initialState = {\n  fruit: FRUIT_START,\n  direction: RIGHT,\n  snakeBody: SNAKE_START,\n  points: POINTS_START,\n  isGameOn: false,\n  showForm: false,\n  inputTextValue: '',\n  //getting results list from local storage\n  resultsList: getResultsList(),\n}\n  \nclass SnakeApp extends Component {\n\n  constructor(){\n    super();\n    this.state = initialState;\n    this.intervalID = null;\n    this.speed = SPEED_START;\n  }\n\n  componentDidMount() {\n      document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    if(this.state.isGameOn){\n      let sign = true;\n      this.isCrushToBorder();\n      this.isCrushToSnake(sign);\n      this.isAteFruit();\n    }\n  }\n  componentWillUnmount() {\n    if(!this.state.isGameOn){\n      clearInterval(this.intervalID);\n    }\n }\n\n  onKeyDown = (e) => {\n    const { direction } = this.state;\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        if(direction === DOWN) return;\n        this.setState({direction: UP});\n        break;\n      case 40:\n        if(direction === UP) return;\n        this.setState({direction: DOWN});\n        break;\n      case 37:\n        if(direction === RIGHT) return;\n        this.setState({direction: LEFT});\n        break;\n      case 39:\n        if(direction === LEFT) return;\n        this.setState({direction: RIGHT});\n        break;\n    }\n  }\n\n  moveSnake = () => {\n    let snakeCopy = [...this.state.snakeBody];\n    let head = snakeCopy[snakeCopy.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 5, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 5, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 5];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 5];\n        break;\n    }\n    snakeCopy.push(head);\n    snakeCopy.shift();\n    this.setState({\n      snakeBody: snakeCopy\n    })\n  }\n\n  isCrushToBorder = () => {\n    let head = this.state.snakeBody[this.state.snakeBody.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.gameOver();\n    }\n  }\n\n  isCrushToSnake = (sign, fruit) => {\n    let snake = [...this.state.snakeBody];\n    let head = snake[snake.length - 1];\n    if(sign){\n      snake.pop();\n      snake.forEach(item => {\n        if (head[0] === item[0] && head[1] === item[1]) {\n          this.gameOver();\n        }\n      })\n    }else{\n      let fruitOnSnake = false;\n      snake.forEach(item => {\n        if (fruit[0] === item[0] && fruit[1] === item[1]) {\n          fruitOnSnake = true;\n        }\n      })\n      return fruitOnSnake;\n    }\n   \n  }\n\n  isAteFruit = () => {\n    let { snakeBody, fruit } = this.state;\n    let head = snakeBody[snakeBody.length - 1];\n\n    if (head[0] === fruit[0] && head[1] === fruit[1]) {\n      this.setState(({points}) =>({\n        points: ++points,\n        fruit: this.getNewFruitPosition(),\n      }))\n      this.increaseSnakeSize();\n      this.increaseSpeed();\n    }\n  }\n\n  increaseSnakeSize = () => {\n    let snakeCopy = [...this.state.snakeBody];\n    snakeCopy.unshift([])\n    this.setState({\n      snakeBody: snakeCopy,\n    })\n  }\n\n  increaseSpeed = () => {\n    if (this.speed > 10) {\n      \n      clearInterval(this.intervalID);\n      this.intervalID = null;\n\n      this.speed -= 8;\n      this.intervalID = setInterval(this.moveSnake, this.speed);\n    }\n  }\n\n  getNewFruitPosition = () => {\n    let min = 1;\n    let max = 20;\n    let x = Math.floor((Math.random()*(max-min+1)+min)/2)*5;\n    let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*5;\n    let fruit = [x, y];\n    if(this.isCrushToSnake(false, fruit)){\n      return this.getNewFruitPosition(); \n    }else{\n      return fruit;\n    }\n  }\n\n  handleInputOnChange = ({target: {value}}) => {\n    this.setState({inputTextValue: value});\n  }\n\n  gameOver = () => { \n    clearInterval(this.intervalID);\n    this.speed = SPEED_START;\n    this.setState({isSaveResultsOpen: true, isGameOn: false});\n  }\n\n  saveResults = () => {\n    const { inputTextValue, points, resultsList } = this.state;\n    resultsList.push({player: inputTextValue, score: points });\n    localStorage.setItem('playersList', JSON.stringify(resultsList));\n    this.setState(initialState);\n  }\n\n  startNewGame = () => {\n    if(this.state.isGameOn) return;\n    this.intervalID = setInterval(this.moveSnake, this.speed);\n    this.setState({\n      isGameOn: true,\n    });\n  }\n\n  render() {\n    const { snakeBody, points,  fruit, isGameOn, inputTextValue, isSaveResultsOpen, resultsList} = this.state;\n    const sortedResults = (resultsList.sort((a,b) => b.score - a.score)).splice(0,15);\n    const canShowResults = sortedResults && sortedResults.length > 0 && !isGameOn;\n    return (\n      <>\n      {   \n          // Show game part\n        !isSaveResultsOpen\n          ?\n            <div className=\"center\">\n              <h1 className=\"title\">Змейка на React Js</h1>\n              <div className=\"gameField\">\n                <Snake snakeBody={snakeBody}/> \n                <Fruit fruitBody={fruit}/>\n              </div>\n              {isGameOn && <PlayData points={points} />}\n              {!isGameOn && <button className=\"newGame\" onClick={this.startNewGame}>Новая игра</button>}\n              {canShowResults && <Results results={sortedResults} /> }\n            </div>\n          :\n          // Or show save results form\n          <SaveResultsForm \n            points={points} \n            onChange={this.handleInputOnChange} \n            onClick={this.saveResults} \n            value={inputTextValue} \n          />\n      }\n      </>\n    );\n  }\n}\n\nexport default SnakeApp;\n","//getting results list from local storage\n\nimport { DEFAULT_PLAYERS } from '../constants';\n\nconst getResultsList = () => {\n  let resultsList = null;\n\n  if(!localStorage.getItem('playersList')){\n      resultsList = DEFAULT_PLAYERS;\n  }else{\n      resultsList = JSON.parse(localStorage.getItem('playersList'));\n  }\n\n  return resultsList;\n}\n\nexport default getResultsList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SnakeApp from './SnakeApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <SnakeApp />\n  ,document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}